AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template that provisions a Snowflake Integration object for Amazon S3 access

# ----------------------------------------------------------------------------------------------------------
#  CloudFormation Template 1 of 1 - 
# 
#  Automates creation of a Snowflake Integration object for Amazon S3 access
#    - Uses Snowflake OAuth to invoke Snowflake SQL API and provision Snowflake Integration object component in Snowflake
#    - Provisions IAM integration role to provision Snowflake Integration object component in AWS
#    - Automatically updates IAM role with External ID and Snowflake User Arn
##
## @kmmahaj
## 
#
# ------------------------------------------------------------...............................................

Parameters:

  SnowflakeOAuthRefreshToken:
    Description: REQUIRED. Refresh token for Snowflake OAuth
    Type: String
    AllowedPattern: .+
    ConstraintDescription: Refresh token is required
  S3BucketwithPrefix:
    Description: Snowflake AWS IAM ARN for the Snowflake Integration object
    Type: String
    Default: 's3-snowflake-<accountid>-<region>/data'
  SnowflakeExternalId:
    Description: External ID for the IAM Cross Account role for the Snowflake Integration object
    Type: String
    Default: '12312312313123'
  SnowflakeUserArn:
    Description: Snowflake AWS IAM ARN for the Snowflake Integration object
    Type: String
    Default: '1234123412341234'
  SnowflakeIAMTemplateURL:
    Description: >-
      Base URL for Snowflake's CloudFormation template for the IAM integration role
    Type: String
    Default: 'https://snowflake-int.s3.amazonaws.com/aws-snowflake-iam.yaml'

Resources:

# ---------------------------------------------------------------------------------------------------
#  Creates a Snowflake Secrets Manager SecretString to store Snowflake OAuth Refresh token
#      - Accessed during the update of the Snowflake IAM integration role in AWS
# --------------------------------------------------------------------------------------------------

  SnowflakeSecretKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "This is KMS Key Id used to encrypt/decrypt the Secret"
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: snowflake-key-default-1
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !Sub ${AWS::AccountId}
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt
              - kms:GenerateDataKey
              - kms:CreateGrant
              - kms:DescribeKey
            Resource: '*'
            Condition:
              StringEquals:
                kms:ViaService: !Sub secretsmanager.${AWS::Region}.amazonaws.com
                kms:CallerAccount: !Sub ${AWS::AccountId}

  SnowflakeSecretKMSAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/snowflake-secret-${AWS::StackName}"
      TargetKeyId:
        Ref: SnowflakeSecretKMSKey

  #Create Secret 
  SnowflakeSecretString:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Credentials required for Snowflake OAuth 
      Name: SnowflakeSecretString
      KmsKeyId: !Ref SnowflakeSecretKMSKey
      SecretString:
        Fn::Join:
        - ''
        - - '{"SnowflakeOAuthRefreshToken":"'
          - Ref: SnowflakeOAuthRefreshToken
          - '"}'

# ---------------------------------------------------------------------
#  Create a Snowflake IAM Integration role StackSet
# ---------------------------------------------------------------------
 
  SnowflakeIAMStackSet:
    Type: AWS::CloudFormation::StackSet
    Properties:
      Description: StackSet for creating Snowflake IAM Integration Role
      StackSetName: 'SnowflakeIAMRolev1'
      Parameters:
        - ParameterKey: S3BucketwithPrefix
          ParameterValue: !Ref S3BucketwithPrefix
        - ParameterKey: SnowflakeExternalId
          ParameterValue: !Ref SnowflakeExternalId
        - ParameterKey: SnowflakeUserArn
          ParameterValue: !Ref SnowflakeUserArn
      PermissionModel: SELF_MANAGED
      AdministrationRoleARN: !Join [':', ['arn:aws:iam:', !Ref 'AWS::AccountId', 'role/service-role/AWSControlTowerStackSetRole']]
      ExecutionRoleName: "AWSControlTowerExecution"
      Capabilities:
        - CAPABILITY_NAMED_IAM
        - CAPABILITY_IAM
        - CAPABILITY_AUTO_EXPAND
      TemplateURL: !Ref SnowflakeIAMTemplateURL

# --------------------------------------------------------------------------------------------------
# 
#  1- Provisions a CloudWatchEvents Rule that is triggered based on a Control Tower Lifecycle Event
#  2- Provisions a Lifecyle Lambda as a target for the CloudWatch Events Rule.
# --------------------------------------------------------------------------------------------------

  AcmeCaptureControlTowerLifeCycleEvents:
    Type: AWS::Events::Rule
    Properties:
      Description: Capture Control Tower LifeCycle Events for Acme and Trigger an Action
      EventPattern:
        detail:
          eventName:
          - CreateManagedAccount
          - UpdateManagedAccount
          - EnableGuardrail
          - DisableGuardrail
          - SetupLandingZone
          - UpdateLandingZone
          - RegisterOrganizationalUnit
          - DeregisterOrganizationalUnit
          eventSource:
          - controltower.amazonaws.com
        detail-type:
        - AWS Service Event via CloudTrail
        source:
        - aws.controltower
      Name: AcmeCaptureControlTowerLifeCycleEvents
      State: ENABLED
      Targets:
      - Arn: !GetAtt "TriggerCustomizationsOnLifeCycleEvent.Arn"
        Id: IDCaptureControlTowerLifeCycleEvents


  #Acme TriggerLifecyleEvent Lambda
  TriggerCustomizationsOnLifeCycleEvent:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import os
          import boto3
          import logging
          import urllib.request

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          stackset_list = ['AcmeMemberRolev1']
          result = {"ResponseMetadata":{"HTTPStatusCode":"400"}}
          
          def get_secret_value(key='AcmeSecretString'):
              secretsmanager = boto3.client('secretsmanager')
              secret_list = secretsmanager.list_secrets()['SecretList']
              output = {}
              for s in secret_list:
                  if key in s.values():
                      output = secretsmanager.get_secret_value(SecretId=key)['SecretString']
              return(output)

          
          def register_acme_account(accountid):
              
              secretList = json.loads(get_secret_value('AcmeSecretString'))
              
              apiKey=""
              apiSecret=""
              url = ""

              if 'apiKey' in secretList:
                  apiKey = secretList['apiKey']
              if 'apiSecret' in secretList:
                  apiSecret = secretList['apiSecret']
              if 'url' in secretList:
                  url = secretList['url']
              
              account_id = accountid

              acmePOSTUrl = 'https://'' + url + '/api/v1/integration/aws?api_key=' + apiKey + '&secret_key=' + apiSecret 

              payload = {
                    'account_id': account_id
              }
              
              data_json=json.dumps(payload)
              req = urllib.request.Request(url = acmePOSTUrl, data = bytes(data_json.encode("utf-8")), method = "POST")
              response_data = {}
              with urllib.request.urlopen(req) as resp:
                response_data = json.loads(resp.read().decode("utf-8"))
                print(response_data)
              output = response_data['status']

              return output


          def lambda_handler(event, context):          
                  
              masterAcct = event['account']
              eventDetails = event['detail']
              regionName = eventDetails['awsRegion']
              eventName = eventDetails['eventName']
              srvEventDetails = eventDetails['serviceEventDetails']
              if eventName == 'CreateManagedAccount' or eventName == 'UpdateManagedAccount':
                  newAccInfo = {}
                  logger.info('Event Processed Sucessfully')
                  if eventName == 'CreateManagedAccount':
                      newAccInfo = srvEventDetails['createManagedAccountStatus']
                  if eventName == 'UpdateManagedAccount':
                      newAccInfo = srvEventDetails['updateManagedAccountStatus']
                  cmdStatus = newAccInfo['state']
                  if cmdStatus == 'SUCCEEDED':
                      '''Sucessful event recieved'''
                      accId = newAccInfo['account']['accountId']

                      # register_acme_account(accId)

                      cloudformation = boto3.client('cloudformation')
                      for item in stackset_list:
                          try:
                              result = cloudformation.create_stack_instances(StackSetName=item, Accounts=[accId], Regions=[regionName])
                              logger.info('Processed {} Sucessfully'.format(item))
                          except Exception as e:
                              logger.error('Unable to launch in:{}, REASON: {}'.format(item, e))
                  else:
                      '''Unsucessful event recieved'''
                      logger.info('Unsucessful Event Recieved. SKIPPING :{}'.format(event))
                      return(False)
              else:
                  logger.info('Control Tower Event Captured :{}'.format(event))
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt "AcmeTriggerLifecycleEventLambdaRole.Arn"
      Runtime: python3.7
      Timeout: 60


#Acme Trigger LifecyleEvent Lambda Role
  AcmeTriggerLifecycleEventLambdaRole:
    Type: 'AWS::IAM::Role'
    DependsOn: AcmeSecretString
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowLambdaAssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: AcmeLifecycleLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: '1'
                Action:
                  - 's3:GetObject'
                Effect: Allow
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::cribl-controltower-8zwvs0yfk6at-${AWS::Region}'
                  - !Sub 'arn:${AWS::Partition}:s3:::cribl-controltower-8zwvs0yfk6at-${AWS::Region}/*'
              - Sid: '2'
                Effect: Allow
                Action:
                  - 'cloudformation:CreateStackInstances'
                Resource: !Join [':',['arn:aws:cloudformation', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'stackset/AcmeMemberRolev1:*']]
              - Sid: '3'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Effect: Allow
                Resource: !Join [':',['arn:aws:logs', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'log-group', '/aws/lambda/Acme_TriggerLifecyleEvent:*']]
              - Sid: '4'
                Action:
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:ListSecrets'
                Effect: Allow
                Resource: !Join [':',['arn:aws:secretsmanager', !Ref 'AWS::Region', !Ref 'AWS::AccountId','secret','AcmeSecretString*']]
              - Sid: '5'
                Action:
                  - 'kms:Decrypt'
                Effect: Allow
                Resource: !GetAtt "AcmeControlTowerKMSKey.Arn"
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/ReadOnlyAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

    
  PermissionForEventsToInvokeLambdachk:
    Type: AWS::Lambda::Permission
    DependsOn: AcmeSecretString
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "TriggerCustomizationsOnLifeCycleEvent.Arn"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt "AcmeCaptureControlTowerLifeCycleEvents.Arn"
